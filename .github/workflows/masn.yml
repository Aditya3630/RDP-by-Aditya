name: RustDesk RDP Stable 6H

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Session duration in hours (max 6)'
        required: false
        default: '6'
        type: string
  schedule:
    - cron: '0 */6 * * *'

jobs:
  build:
    name: Deploy RustDesk Portable
    runs-on: windows-latest
    timeout-minutes: 360
    env:
      RDP_PASSWORD: "TheDisa1a"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        shell: powershell
        run: |
          Write-Host "Creating required directories..."
          New-Item -ItemType Directory -Force -Path rd_files, logs | Out-Null
          Write-Host "Directories created successfully"

      - name: Download RustDesk Portable
        shell: powershell
        run: |
          try {
            $url = "https://github.com/rustdesk/rustdesk/releases/latest/download/rustdesk-1.3.2-x86_64.exe"
            $out = "rd_files\rustdesk.exe"
            Write-Host "Downloading RustDesk from latest release..."
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing
            if (-not (Test-Path $out) -or (Get-Item $out).Length -eq 0) {
              Write-Host "Download failed, trying alternative URL..."
              $altUrl = "https://github.com/rustdesk/rustdesk/releases/download/1.3.2/rustdesk-1.3.2-x86_64.exe"
              Invoke-WebRequest -Uri $altUrl -OutFile $out -UseBasicParsing
            }
            Write-Host "RustDesk downloaded successfully"
          }
          catch {
            Write-Host "Download error: $($_.Exception.Message)"
            exit 1
          }

      - name: Enable Remote Desktop
        shell: powershell
        run: |
          try {
            Write-Host "Enabling Windows Remote Desktop..."
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force
            $securePassword = ConvertTo-SecureString "${{ env.RDP_PASSWORD }}" -AsPlainText -Force
            Set-LocalUser -Name "runneradmin" -Password $securePassword
            Write-Host "Remote Desktop enabled successfully"
          }
          catch {
            Write-Host "RDP setup warning: $($_.Exception.Message)"
          }

      - name: Start RustDesk
        shell: powershell
        run: |
          try {
            $exe = "rd_files\rustdesk.exe"
            Write-Host "Starting RustDesk..."
            Start-Process -FilePath $exe -ArgumentList "--service" -WindowStyle Hidden
            Start-Sleep -Seconds 15
            Write-Host "RustDesk started successfully"
          }
          catch {
            Write-Host "RustDesk startup error: $($_.Exception.Message)"
          }

      - name: Get Connection Info
        shell: powershell
        run: |
          Write-Host "Connection Information:" -ForegroundColor Cyan
          Write-Host "RDP Credentials:" -ForegroundColor Yellow
          Write-Host " Username: runneradmin"
          Write-Host " Password: ${{ env.RDP_PASSWORD }}"
          Write-Host "Session will run for maximum 6 hours" -ForegroundColor Red

      - name: Keep Session Alive
        shell: powershell
        run: |
          Write-Host "Keepalive loop started..."
          $startTime = Get-Date
          $maxDuration = New-TimeSpan -Hours 6
          while ($true) {
            $currentTime = Get-Date
            $elapsed = $currentTime - $startTime
            if ($elapsed -gt $maxDuration) {
              Write-Host "Maximum session time reached. Ending session..."
              break
            }
            $remaining = $maxDuration - $elapsed
            Write-Host "Session active for $($elapsed.Hours)h $($elapsed.Minutes)m. Remaining: $($remaining.Hours)h $($remaining.Minutes)m"
            Start-Sleep -Seconds 300
          }
          Write-Host "Session completed successfully"
